{"version":3,"file":"static/js/464.e5495421.chunk.js","mappings":"sMA0HA,EAjHgB,SAAHA,GAAkC,IAA5BC,EAAQD,EAARC,SAAUC,EAAIF,EAAJE,KAAMC,EAAIH,EAAJG,KAC3BC,EAAW,CACfC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,UAAU,EACVC,UAAU,EACVC,cAAe,IACfC,WACEC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQC,UACnBF,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAGjBC,WACEJ,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQC,UACnBF,EAAAA,EAAAA,KAAA,KAAGG,UAAU,yBAKnB,OACEH,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,CAAAH,UACEF,EAAAA,EAAAA,KAACM,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKjB,GAAQ,IAAAY,SACjBd,EAAKoB,OAAS,GACG,qBAATpB,GACE,OAATA,GACAA,EAAKqB,KAAI,SAACC,EAAQC,GAChB,OACEX,EAAAA,EAAAA,KAAA,OACEG,UAAWd,EAAO,WAAa,0BAA0Ba,UAGzDF,EAAAA,EAAAA,KAAA,OACEY,IAAKF,EAAOG,MACZC,IAAK3B,EAAWuB,EAAOK,SAAWL,EAAOM,MACzCb,UACEd,EAAO,eAAiB,+BANvBsB,EA2EX,QAIV,C,4FC7FA,UAtBa,WACX,IAAAM,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAgCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAxCpC,EAAQqC,EAAA,GAAEC,EAAWD,EAAA,GAE5BE,GAA8CC,EAAAA,EAAAA,YAAWC,EAAAA,GAAjDC,EAAOH,EAAPG,QAASC,EAASJ,EAATI,UAAWC,EAAaL,EAAbK,cAQ5B,OAPAC,EAAAA,EAAAA,YAAU,WACRF,EAAU,UAAUG,MAAK,SAACC,GACxBZ,EAAUY,EAAIC,QAChB,IACAV,EAAYI,IACd,GAAG,IACHO,QAAQC,IAAIhB,GACRU,GACK/B,EAAAA,EAAAA,KAACsC,EAAAA,EAAc,KAGpBtC,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACuC,EAAAA,EAAO,CAACnD,KAAMiC,EAAQlC,SAAUA,EAAUE,MAAM,KAGzD,C","sources":["Components/Sliders/Sliders.js","Pages/Home/Home.js"],"sourcesContent":["import React from \"react\";\nimport Slider from \"react-slick\";\nimport \"./slider.scss\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n// import { motion } from \"framer-motion\";\n// import { Text } from \"../../containers/Language\";\n// import { Link } from \"react-router-dom\";\n\nconst Sliders = ({ isArabic, data, home }) => {\n  const settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n    lazyLoad: true,\n    autoplaySpeed: 3000,\n    prevArrow: (\n      <button type=\"button\">\n        <i className=\"bi bi-arrow-left\"></i>\n      </button>\n    ),\n    nextArrow: (\n      <button type=\"button\">\n        <i className=\"bi bi-arrow-right\"></i>\n      </button>\n    ),\n  };\n\n  return (\n    <>\n      <Slider {...settings}>\n        {data.length > 0 &&\n          typeof data !== \"undefined\" &&\n          data !== null &&\n          data.map((slider, key) => {\n            return (\n              <div\n                className={home ? \"mySlides\" : \" mySlides mySlides-news\"}\n                key={key}\n              >\n                <img\n                  src={slider.image}\n                  alt={isArabic ? slider.title_ar : slider.title}\n                  className={\n                    home ? \"  slider-img\" : \"img-fluid slider-img-news\"\n                  }\n                  // height={00}\n                />\n\n                {/* {home ? (\n                  <div\n                    className={\n                      isArabic\n                        ? \"  col-10 col-md-5 article-container-arabic   \"\n                        : \"article-container col-10 col-md-5\"\n                    }\n                  >\n                    <div\n                      className={\n                        isArabic\n                          ? \"article-container-titles-arabic row d-flex flex-column mr-4\"\n                          : \"article-container-titles row d-flex flex-column ml-4\"\n                      }\n                    >\n                      <h1>{isArabic ? slider.title_ar : slider.title}</h1>\n                      <h4>{isArabic ? slider.details_ar : slider.details}</h4>\n                    </div>\n\n                    <motion.div\n                      className={\n                        isArabic\n                          ? \"article-container-btn-arabic row justify-content-end ml-5 \"\n                          : \" row justify-content-end mr-5\"\n                      }\n                    >\n                      <motion.a\n                        whileHover={{\n                          scale: 1.1,\n                          textShadow: \"0px 0px 8px rgb(255,255,255)\",\n                          boxShadow: \"0px 0px 8px rgb(255,255,255)\",\n                        }}\n                        className=\"read-more\"\n                        href={slider.link}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <Text tid=\"readMore\" />\n                      </motion.a>\n                    </motion.div>\n                  </div>\n                ) : (\n                  <div\n                    className={\n                      isArabic\n                        ? \"news-sliders d-flex justify-content-end mr-3\"\n                        : \"news-sliders d-flex justify-content-start ml-3\"\n                    }\n                  >\n                    <h2\n                      className={\n                        isArabic\n                          ? \"article-container-titles-arabic news-slider-title   font-weight-bold \"\n                          : \"news-slider-title   font-weight-bold \"\n                      }\n                    >\n                      <Link to={`/news/${slider.count}`}>\n                        {isArabic ? slider.title_ar : slider.title}\n                      </Link>\n                    </h2>\n                  </div>\n                )} */}\n              </div>\n            );\n          })}\n      </Slider>\n    </>\n  );\n};\n\nexport default Sliders;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { IntranetContext } from \"../../context\";\nimport Sliders from \"../../Components/Sliders/Sliders\";\nimport SkeletonLoader from \"../../Components/Skeleton/SkeletonLoader\";\n\nconst Home = () => {\n  const [slides, setSlides] = useState([]);\n  const [isArabic, setIsArabic] = useState(false);\n\n  const { getLang, fetchData, isDataLoading } = useContext(IntranetContext);\n  useEffect(() => {\n    fetchData(\"slides\").then((res) => {\n      setSlides(res.sliders);\n    });\n    setIsArabic(getLang());\n  }, []);\n  console.log(slides);\n  if (isDataLoading) {\n    return <SkeletonLoader />;\n  } else\n    return (\n      <div>\n        <Sliders data={slides} isArabic={isArabic} home={true} />\n      </div>\n    );\n};\n\nexport default Home;\n"],"names":["_ref","isArabic","data","home","settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","lazyLoad","autoplaySpeed","prevArrow","_jsx","type","children","className","nextArrow","_Fragment","Slider","_objectSpread","length","map","slider","key","src","image","alt","title_ar","title","_useState","useState","_useState2","_slicedToArray","slides","setSlides","_useState3","_useState4","setIsArabic","_useContext","useContext","IntranetContext","getLang","fetchData","isDataLoading","useEffect","then","res","sliders","console","log","SkeletonLoader","Sliders"],"sourceRoot":""}